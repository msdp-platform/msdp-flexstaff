name: FlexStaff Build and Deploy to ACR

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'admin/**'
      - '.github/workflows/flexstaff-build-deploy.yml'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - staging
          - production
        default: dev
      components:
        description: 'Components to build (comma-separated: backend,frontend,admin or "all")'
        required: false
        default: 'all'

env:
  ACR_NAME: msdpacr  # Replace with your ACR name
  ACR_REGISTRY: msdpacr.azurecr.io  # Replace with your ACR registry URL

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  determine-components:
    name: Determine Components to Build
    runs-on: ubuntu-latest
    outputs:
      build-backend: ${{ steps.changes.outputs.backend }}
      build-frontend: ${{ steps.changes.outputs.frontend }}
      build-admin: ${{ steps.changes.outputs.admin }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        id: changes
        run: |
          # For manual trigger, use input parameter
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            COMPONENTS="${{ github.event.inputs.components }}"
            if [ "$COMPONENTS" == "all" ]; then
              echo "backend=true" >> $GITHUB_OUTPUT
              echo "frontend=true" >> $GITHUB_OUTPUT
              echo "admin=true" >> $GITHUB_OUTPUT
            else
              [[ "$COMPONENTS" =~ "backend" ]] && echo "backend=true" >> $GITHUB_OUTPUT || echo "backend=false" >> $GITHUB_OUTPUT
              [[ "$COMPONENTS" =~ "frontend" ]] && echo "frontend=true" >> $GITHUB_OUTPUT || echo "frontend=false" >> $GITHUB_OUTPUT
              [[ "$COMPONENTS" =~ "admin" ]] && echo "admin=true" >> $GITHUB_OUTPUT || echo "admin=false" >> $GITHUB_OUTPUT
            fi
          else
            # For push/PR, detect changes
            if git diff --name-only HEAD~1 HEAD | grep -q '^backend/'; then
              echo "backend=true" >> $GITHUB_OUTPUT
            else
              echo "backend=false" >> $GITHUB_OUTPUT
            fi

            if git diff --name-only HEAD~1 HEAD | grep -q '^frontend/'; then
              echo "frontend=true" >> $GITHUB_OUTPUT
            else
              echo "frontend=false" >> $GITHUB_OUTPUT
            fi

            if git diff --name-only HEAD~1 HEAD | grep -q '^admin/'; then
              echo "admin=true" >> $GITHUB_OUTPUT
            else
              echo "admin=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Display build plan
        run: |
          echo "Components to build:"
          echo "  Backend: ${{ steps.changes.outputs.backend }}"
          echo "  Frontend: ${{ steps.changes.outputs.frontend }}"
          echo "  Admin: ${{ steps.changes.outputs.admin }}"

  build-backend:
    name: Build Backend Service
    needs: determine-components
    if: needs.determine-components.outputs.build-backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        run: |
          az acr login -n ${{ env.ACR_NAME }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ACR_REGISTRY }}/flexstaff/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Verify image
        if: github.event_name != 'pull_request'
        run: |
          echo "Verifying backend image tags:"
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            echo "Checking: $tag"
            docker buildx imagetools inspect "$tag"
          done

  build-frontend:
    name: Build Frontend Application
    needs: determine-components
    if: needs.determine-components.outputs.build-frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        run: |
          az acr login -n ${{ env.ACR_NAME }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ACR_REGISTRY }}/flexstaff/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Verify image
        if: github.event_name != 'pull_request'
        run: |
          echo "Verifying frontend image tags:"
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            echo "Checking: $tag"
            docker buildx imagetools inspect "$tag"
          done

  build-admin:
    name: Build Admin Portal
    needs: determine-components
    if: needs.determine-components.outputs.build-admin == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        run: |
          az acr login -n ${{ env.ACR_NAME }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ACR_REGISTRY }}/flexstaff/admin
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Admin image
        uses: docker/build-push-action@v6
        with:
          context: ./admin
          file: ./admin/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Verify image
        if: github.event_name != 'pull_request'
        run: |
          echo "Verifying admin image tags:"
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            echo "Checking: $tag"
            docker buildx imagetools inspect "$tag"
          done

  summary:
    name: Build Summary
    needs: [determine-components, build-backend, build-frontend, build-admin]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary
        run: |
          echo "## FlexStaff Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend   | ${{ needs.build-backend.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend  | ${{ needs.build-frontend.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Admin     | ${{ needs.build-admin.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Locations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Images are published to: \`${{ env.ACR_REGISTRY }}/flexstaff/<component>:<tag>\`" >> $GITHUB_STEP_SUMMARY
